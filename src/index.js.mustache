/*global document window*/
import { Selector, ClientFunction } from 'testcafe';

export const ReactSelector = Selector(selector => {
    const getRootElsReact15     = {{{getRootElsReact15}}}
    const getRootElsReact16or17 = {{{getRootElsReact16or17}}}
    const selectorReact15       = {{{selectorReact15}}}
    const selectorReact16or17   = {{{selectorReact16or17}}}

    let visitedRootEls = [];
    let rootEls        = null;

    function checkRootNodeVisited (component) {
        return visitedRootEls.indexOf(component) > -1;
    }

    function defineSelectorProperty (value) {
        if (window['%testCafeReactSelector%']) delete window['%testCafeReactSelector%'];

        Object.defineProperty(window, '%testCafeReactSelector%', {
            enumerable:   false,
            configurable: true,
            writable:     false,
            value:        value
        });
    }

    rootEls = getRootElsReact15();

    let foundDOMNodes = void 0;

    if(rootEls.length) {
        window['%testCafeReactVersion%'] = '15';
        window['$testCafeReactSelector'] = selectorReact15;

        foundDOMNodes = selectorReact15(selector);
    }

    rootEls = getRootElsReact16or17();

    if(rootEls.length) {
        window['%testCafeReactVersion%']    = '16|17';
        window['$testCafeReactSelector']    = selectorReact16or17;
        window['$testCafeReact16or17Roots'] = rootEls;

        foundDOMNodes = selectorReact16or17(selector);
    }

    visitedRootEls = [];

    if(foundDOMNodes)
        return foundDOMNodes;

    throw new Error("React component tree is not loaded yet or the current React version is not supported. This module supports React version 15.x and newer. To wait until the React's component tree is loaded, add the `waitForReact` method to fixture's `beforeEach` hook.");
}).addCustomMethods({
    getReact: (node, fn) => {
        const reactVersion     = window['%testCafeReactVersion%'];
        const react15Utils     = {{{react15Utils}}}
        const react16or17Utils = {{{react16or17Utils}}}

        delete window['%testCafeReactVersion%'];

        if(reactVersion === '15')
            return react15Utils.getReact(node, fn);
        if(reactVersion === '16|17')
            return react16or17Utils.getReact(node, fn);
    }
}).addCustomMethods({
    withProps: (nodes, ...args) => {
        window['%testCafeReactFoundComponents%'] = window['%testCafeReactFoundComponents%'].filter(component => {
            return nodes.indexOf(component.node) > -1;
        });

        function isObject(value) {
            return typeof value === 'object' && value !== null && !Array.isArray(value);
        }

        function isEql (value1, value2) {
            if (typeof value1 !== 'object' || value1 === null || typeof value2 !== 'object' || value2 === null)
                return value1 === value2;

            if (Object.keys(value1).length !== Object.keys(value2).length)
                return false;

            for (const prop in value1) {
                if (!value2.hasOwnProperty(prop)) return false;
                if (!isEql(value1[prop], value2[prop])) return false;
            }

            return true;
        }

        function isInclude (value1, value2) {
            if (typeof value1 !== 'object' || value1 === null || typeof value2 !== 'object' || value2 === null)
                return value1 === value2;

            for (const prop in value2) {
                if (!value1.hasOwnProperty(prop)) return false;
                if (!isInclude(value1[prop], value2[prop])) return false;
            }

            return true;
        }

        function matchProps(value1, value2, exactObjectMatch) {
            if(exactObjectMatch) return isEql(value1, value2);

            return isInclude(value1, value2);
        }

        function componentHasProps ({ props }, filterProps, exactObjectMatch) {
             for (const prop of Object.keys(filterProps)) {
                 if (!props.hasOwnProperty(prop)) return false;

                 if (!matchProps(props[prop], filterProps[prop], exactObjectMatch))
                     return false;
             }

             return true;
        }

        const reactVersion     = window['%testCafeReactVersion%'];
        const react15Utils     = {{{react15Utils}}}
        const react16or17Utils = {{{react16or17Utils}}}

        let filterProps = {};
        let options = null;
        const firstArgsIsObject = isObject(args[0]);

        if (args.length === 2 && firstArgsIsObject)
            options = args[1];

        else if (args.length > 2)
            options = args[2];

        if(args.length < 2 && !firstArgsIsObject)
             throw new Error(`The "props" option value is expected to be a non-null object, but it is ${typeof args[0]}.`);
        else if(typeof args[0] !== 'string' && !firstArgsIsObject)
            throw new Error(`The first argument is expected to be a property name string or a "props" non-null object, but it is ${typeof args[0]}.`);

        if(options && typeof options !== 'object' && !Array.isArray(args[0]))
            throw new Error(`The "options" value is expected to be an object, but it is ${typeof options}.`);

        if (args.length > 1) {
            if(firstArgsIsObject)
                filterProps = args[0];
            else
                filterProps[args[0]] = args[1];
        }

        else if (args[0]) filterProps = args[0];

        let getComponentForDOMNode = reactVersion === '15' ? react15Utils.getComponentForDOMNode :
                              react16or17Utils.getComponentForDOMNode;

        const filteredNodes  = [];
        const exactObjectMatch = options && options.exactObjectMatch || false;

        const foundInstances = nodes.filter(node => {
             const componentInstance = getComponentForDOMNode(node);

             if(componentInstance && componentHasProps(componentInstance, filterProps, exactObjectMatch)) {
                 filteredNodes.push(node);

                 return true;
             }
        });

        return foundInstances;
    },

    withKey: (nodes, key) => {
        if(key === void 0 || key === null) return [];

        const keyString = key.toString();

        window['%testCafeReactFoundComponents%'] = window['%testCafeReactFoundComponents%'].filter(component => {
            return nodes.indexOf(component.node) > -1;
        });

        const reactVersion     = window['%testCafeReactVersion%'];
        const react15Utils     = {{{react15Utils}}}
        const react16or17Utils = {{{react16or17Utils}}}
        const reactUtils       = reactVersion === '15' ? react15Utils : react16or17Utils;

        let getComponentForDOMNode = reactUtils.getComponentForDOMNode;
        let getComponentKey        = reactUtils.getComponentKey;

        const filteredNodes  = [];

        const foundInstances = nodes.filter(node => {
            const componentInstance = getComponentForDOMNode(node);
            const componentKey      = getComponentKey(componentInstance);

            if(componentInstance && componentKey === keyString) {
                filteredNodes.push(node);

                return true;
            }
        });

        return foundInstances;
    },

    findReact: (nodes, selector) => {
        const reactVersion     = window['%testCafeReactVersion%'];
        const react15Utils     = {{{react15Utils}}}
        const react16or17Utils = {{{react16or17Utils}}}

        let componentInstances           = null;
        let scanDOMNodeForReactComponent = reactVersion === '15' ? react15Utils.scanDOMNodeForReactComponent :
                           react16or17Utils.scanDOMNodeForReactComponent;

        componentInstances = nodes.map(scanDOMNodeForReactComponent);

        const reactSelector = window['$testCafeReactSelector'];

        return reactSelector(selector, componentInstances);
    }
}, { returnDOMNodes: true });

export const waitForReact = {{{waitForReact}}};
