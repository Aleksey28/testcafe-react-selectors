/*global document window*/
import { Selector, ClientFunction } from 'testcafe';

export const ReactSelector = Selector(selector => {
    const getRootElsReact15 = {{{getRootElsReact15}}}
    const getRootElsReact16 = {{{getRootElsReact16}}}
    const selectorReact15 = {{{selectorReact15}}}
    const selectorReact16 = {{{selectorReact16}}}

    let visitedRootEls = [];
    let rootEls        = null;

    function checkRootNodeVisited (component) {
        return visitedRootEls.indexOf(component) > -1;
    }

    function defineSelectorProperty (value) {
        if (window['%testCafeReactSelector%']) delete window['%testCafeReactSelector%'];

        Object.defineProperty(window, '%testCafeReactSelector%', {
            enumerable:   false,
            configurable: true,
            writable:     false,
            value:        value
        });
    }

    rootEls = getRootElsReact15();

    let foundDOMNodes = void 0;

    if(rootEls.length) {
        window['%testCafeReactVersion%'] = 15;
        window['$testCafeReactSelector'] = selectorReact15;

        foundDOMNodes = selectorReact15(selector);
    }

    rootEls = getRootElsReact16();

    if(rootEls.length) {
        window['%testCafeReactVersion%'] = 16;
        window['$testCafeReactSelector'] = selectorReact16;
        window['$testCafeReact16Roots']  = rootEls;

        foundDOMNodes = selectorReact16(selector);
    }

    visitedRootEls = [];

    if(foundDOMNodes)
        return foundDOMNodes;

    throw new Error("testcafe-react-selectors supports React version 15.x and newer. To wait until the React's component tree is loaded, add the `waitForReact` method to fixture's `beforeEach` hook.");
}).addCustomMethods({
    getReact: (node, fn) => {
        const reactVersion = window['%testCafeReactVersion%'];
        const react15Utils = {{{react15Utils}}}
        const react16Utils = {{{react16Utils}}}

        delete window['%testCafeReactVersion%'];

        if(reactVersion === 15)
            return react15Utils.getReact(node, fn);
        if(reactVersion === 16)
            return react16Utils.getReact(node, fn);
    }
}).addCustomMethods({
    withProps: (nodes, ...args) => {
        window['%testCafeReactFoundComponents%'] = window['%testCafeReactFoundComponents%'].filter(component => {
            return nodes.indexOf(component.node) > -1;
        });

        function isEql (value1, value2) {
            if (typeof value1 !== 'object' || value1 === null || typeof value2 !== 'object' || value2 === null)
                return value1 === value2;

            if (Object.keys(value1).length !== Object.keys(value2).length)
                return false;

            for (const prop in value1) {
                if (!value2.hasOwnProperty(prop)) return false;
                if (!isEql(value1[prop], value2[prop])) return false;
            }

            return true;
        }

        function componentHasProps ({ props }, filterProps) {
            if (Object.keys(props).length === 0 && Object.keys(filterProps).length > 0)
                return false;

            for (const prop of Object.keys(filterProps)) {
                if (!props.hasOwnProperty(prop) || !isEql(props[prop], filterProps[prop]))
                    return false;
            }

            return true;
        }

        const reactVersion = window['%testCafeReactVersion%'];
        const react15Utils = {{{react15Utils}}}
        const react16Utils = {{{react16Utils}}}

        let filterProps = {};

        const isPropsValid = args[0] !== null && typeof args[0] === 'object' && !Array.isArray(args[0]);

        if(args.length === 1 && !isPropsValid)
            throw new Error(`"props" option is expected to be a non-null object, but it was ${typeof args[0]}.`);

        if(args.length > 1 && typeof args[0] !== 'string')
            throw new Error(`property name is expected to be a string, but it was ${typeof args[0]}.`);

        if (args.length > 1) filterProps[args[0]] = args[1];
        else if (args[0]) filterProps = args[0];

        let getComponentForDOMNode = reactVersion === 15 ? react15Utils.getComponentForDOMNode :
                             react16Utils.getComponentForDOMNode;

        const filteredNodes  = [];

        const foundInstances = nodes.filter(node => {
            const componentInstance = getComponentForDOMNode(node);

            if(componentInstance && componentHasProps(componentInstance, filterProps)) {
                filteredNodes.push(node);

                return true;
            }
        });

        return foundInstances;
    },

    findReact: (nodes, selector) => {
        const reactVersion     = window['%testCafeReactVersion%'];
        const react15Utils     = {{{react15Utils}}}
        const react16Utils     = {{{react16Utils}}}

        let componentInstances           = null;
        let scanDOMNodeForReactComponent = reactVersion === 15 ? react15Utils.scanDOMNodeForReactComponent :
                           react16Utils.scanDOMNodeForReactComponent;

        componentInstances = nodes.map(scanDOMNodeForReactComponent);

        const reactSelector = window['$testCafeReactSelector'];

        return reactSelector(selector, componentInstances);
    }
}, { returnDOMNodes: true });

export const waitForReact = {{{waitForReact}}};
